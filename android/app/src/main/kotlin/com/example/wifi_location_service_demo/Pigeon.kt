// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.wifi_location_service_demo

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private object PigeonPigeonUtils {

    fun createConnectionError(channelName: String): FlutterError {
        return FlutterError(
            "channel-error",
            "Unable to establish connection on channel: '$channelName'.",
            ""
        )
    }

    fun wrapResult(result: Any?): List<Any?> {
        return listOf(result)
    }

    fun wrapError(exception: Throwable): List<Any?> {
        return if (exception is FlutterError) {
            listOf(
                exception.code,
                exception.message,
                exception.details
            )
        } else {
            listOf(
                exception.javaClass.simpleName,
                exception.toString(),
                "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
            )
        }
    }

    fun deepEquals(a: Any?, b: Any?): Boolean {
        if (a is ByteArray && b is ByteArray) {
            return a.contentEquals(b)
        }
        if (a is IntArray && b is IntArray) {
            return a.contentEquals(b)
        }
        if (a is LongArray && b is LongArray) {
            return a.contentEquals(b)
        }
        if (a is DoubleArray && b is DoubleArray) {
            return a.contentEquals(b)
        }
        if (a is Array<*> && b is Array<*>) {
            return a.size == b.size &&
                    a.indices.all { deepEquals(a[it], b[it]) }
        }
        if (a is List<*> && b is List<*>) {
            return a.size == b.size &&
                    a.indices.all { deepEquals(a[it], b[it]) }
        }
        if (a is Map<*, *> && b is Map<*, *>) {
            return a.size == b.size && a.all {
                (b as Map<Any?, Any?>).containsKey(it.key) &&
                        deepEquals(it.value, b[it.key])
            }
        }
        return a == b
    }

}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Coordinate(
    /** 緯度 */
    val lat: Double,
    /** 経度 */
    val lng: Double,
    /** 接続またはスキャンした Wi-Fi の SSID */
    val ssid: String,
    /** 端末で測定したエポック時刻（ミリ秒） */
    val epochMillis: Long,
    /** 測定した日付（例: "2025-06-04"） */
    val date: String,
    /** 測定した時刻（例: "08:31:52"） */
    val time: String
) {
    companion object {
        fun fromList(pigeonVar_list: List<Any?>): Coordinate {
            val lat = pigeonVar_list[0] as Double
            val lng = pigeonVar_list[1] as Double
            val ssid = pigeonVar_list[2] as String
            val epochMillis = pigeonVar_list[3] as Long
            val date = pigeonVar_list[4] as String
            val time = pigeonVar_list[5] as String
            return Coordinate(lat, lng, ssid, epochMillis, date, time)
        }
    }

    fun toList(): List<Any?> {
        return listOf(
            lat,
            lng,
            ssid,
            epochMillis,
            date,
            time,
        )
    }

    override fun equals(other: Any?): Boolean {
        if (other !is Coordinate) {
            return false
        }
        if (this === other) {
            return true
        }
        return PigeonPigeonUtils.deepEquals(toList(), other.toList())
    }

    override fun hashCode(): Int = toList().hashCode()
}

private open class PigeonPigeonCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return when (type) {
            129.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Coordinate.fromList(it)
                }
            }

            else -> super.readValueOfType(type, buffer)
        }
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        when (value) {
            is Coordinate -> {
                stream.write(129)
                writeValue(stream, value.toList())
            }

            else -> super.writeValue(stream, value)
        }
    }
}

/**
 * Flutter → Kotlin：サービス制御
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ServiceControlApi {
    fun startService()
    fun stopService()

    companion object {
        /** The codec used by ServiceControlApi. */
        val codec: MessageCodec<Any?> by lazy {
            PigeonPigeonCodec()
        }

        /** Sets up an instance of `ServiceControlApi` to handle messages through the `binaryMessenger`. */
        @JvmOverloads
        fun setUp(
            binaryMessenger: BinaryMessenger,
            api: ServiceControlApi?,
            messageChannelSuffix: String = ""
        ) {
            val separatedMessageChannelSuffix =
                if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.startService$separatedMessageChannelSuffix",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        val wrapped: List<Any?> = try {
                            api.startService()
                            listOf(null)
                        } catch (exception: Throwable) {
                            PigeonPigeonUtils.wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.stopService$separatedMessageChannelSuffix",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        val wrapped: List<Any?> = try {
                            api.stopService()
                            listOf(null)
                        } catch (exception: Throwable) {
                            PigeonPigeonUtils.wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
        }
    }
}

/**
 * Kotlin → Flutter：座標 Push
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class CoordinatePushApi(
    private val binaryMessenger: BinaryMessenger,
    private val messageChannelSuffix: String = ""
) {
    companion object {
        /** The codec used by CoordinatePushApi. */
        val codec: MessageCodec<Any?> by lazy {
            PigeonPigeonCodec()
        }
    }

    fun onCoordinate(coordinateArg: Coordinate, callback: (Result<Unit>) -> Unit) {
        val separatedMessageChannelSuffix =
            if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
        val channelName =
            "dev.flutter.pigeon.wifi_location_service_demo.CoordinatePushApi.onCoordinate$separatedMessageChannelSuffix"
        val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
        channel.send(listOf(coordinateArg)) {
            if (it is List<*>) {
                if (it.size > 1) {
                    callback(
                        Result.failure(
                            FlutterError(
                                it[0] as String,
                                it[1] as String,
                                it[2] as String?
                            )
                        )
                    )
                } else {
                    callback(Result.success(Unit))
                }
            } else {
                callback(Result.failure(PigeonPigeonUtils.createConnectionError(channelName)))
            }
        }
    }
}
