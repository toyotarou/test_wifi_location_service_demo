// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.wifi_location_service_demo

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Coordinate (
  /** 緯度 */
  val lat: Double,
  /** 経度 */
  val lng: Double,
  /** 接続またはスキャンした Wi-Fi の SSID */
  val ssid: String,
  /** 端末で測定したエポック時刻（ミリ秒） */
  val epochMillis: Long,
  /** 測定した日付（例: "2025-06-04"） */
  val date: String,
  /** 測定した時刻（例: "08:31:52"） */
  val time: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Coordinate {
      val lat = list[0] as Double
      val lng = list[1] as Double
      val ssid = list[2] as String
      val epochMillis = list[3].let { if (it is Int) it.toLong() else it as Long }
      val date = list[4] as String
      val time = list[5] as String
      return Coordinate(lat, lng, ssid, epochMillis, date, time)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      lat,
      lng,
      ssid,
      epochMillis,
      date,
      time,
    )
  }
}
/**
 * Flutter → Kotlin：サービス制御
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ServiceControlApi {
  fun startService()
  fun stopService()

  companion object {
    /** The codec used by ServiceControlApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ServiceControlApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ServiceControlApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.startService", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.startService()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.stopService", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopService()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object CoordinatePushApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Coordinate.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Coordinate -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Kotlin → Flutter：座標 Push
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class CoordinatePushApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by CoordinatePushApi. */
    val codec: MessageCodec<Any?> by lazy {
      CoordinatePushApiCodec
    }
  }
  fun onCoordinate(coordinateArg: Coordinate, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.wifi_location_service_demo.CoordinatePushApi.onCoordinate"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(coordinateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
