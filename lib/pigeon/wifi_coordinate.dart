// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class Coordinate {
  Coordinate({
    required this.lat,
    required this.lng,
    required this.ssid,
    required this.epochMillis,
    required this.date,
    required this.time,
  });

  /// 緯度
  double lat;

  /// 経度
  double lng;

  /// 接続またはスキャンした Wi-Fi の SSID
  String ssid;

  /// 端末で測定したエポック時刻（ミリ秒）
  int epochMillis;

  /// 測定した日付（例: "2025-06-04"）
  String date;

  /// 測定した時刻（例: "08:31:52"）
  String time;

  Object encode() {
    return <Object?>[
      lat,
      lng,
      ssid,
      epochMillis,
      date,
      time,
    ];
  }

  static Coordinate decode(Object result) {
    result as List<Object?>;
    return Coordinate(
      lat: result[0]! as double,
      lng: result[1]! as double,
      ssid: result[2]! as String,
      epochMillis: result[3]! as int,
      date: result[4]! as String,
      time: result[5]! as String,
    );
  }
}

/// Flutter → Kotlin：サービス制御
class ServiceControlApi {
  /// Constructor for [ServiceControlApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ServiceControlApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<void> startService() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.startService';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopService() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.wifi_location_service_demo.ServiceControlApi.stopService';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _CoordinatePushApiCodec extends StandardMessageCodec {
  const _CoordinatePushApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Coordinate) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Coordinate.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Kotlin → Flutter：座標 Push
abstract class CoordinatePushApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _CoordinatePushApiCodec();

  void onCoordinate(Coordinate coordinate);

  static void setup(CoordinatePushApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.wifi_location_service_demo.CoordinatePushApi.onCoordinate', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.wifi_location_service_demo.CoordinatePushApi.onCoordinate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Coordinate? arg_coordinate = (args[0] as Coordinate?);
          assert(arg_coordinate != null,
              'Argument for dev.flutter.pigeon.wifi_location_service_demo.CoordinatePushApi.onCoordinate was null, expected non-null Coordinate.');
          try {
            api.onCoordinate(arg_coordinate!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
